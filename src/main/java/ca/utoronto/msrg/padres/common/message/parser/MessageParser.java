/* Generated By:JavaCC: Do not edit this line. MessageParser.java */
package ca.utoronto.msrg.padres.common.message.parser;

import ca.utoronto.msrg.padres.common.message.*;
import java.util.*;
import java.text.*;

import java.lang.UnsupportedOperationException;

public class MessageParser implements MessageParserConstants {
  public enum ParserType
  {
    UNINITIALIZED,
    ADV_PARSER,
    SUB_PARSER,
    COMP_SUB_PARSER,
    PUB_PARSER,
  };

  static int sNum = 0;
  public ParserType _parsertype = ParserType.UNINITIALIZED;
  public Set<String> attrlist = Collections.synchronizedSet(new HashSet<String>());

  public MessageParser(ParserType type, java.io.InputStream stream) {
      this(stream, (String)null);
      _parsertype = type;
  }

  public MessageParser(String a) throws ParseException {
      this(ParserType.UNINITIALIZED, a);
  }

 /* Reinitialise. */
 /*
 static public void ReInit(java.io.Reader stream, int type) {
   _parsertype = type;
   sNum = 0;
   ReInit(stream);
 }
 */

  public MessageParser(ParserType type, String stringRep)  throws ParseException {
    this(type, new java.io.StringBufferInputStream(stringRep));
  }

  final public Object Input() throws ParseException, ParseException {
  Object parseroutput = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
      jj_consume_token(25);
      parseroutput = CompositeSubscription(null);
      jj_consume_token(26);
    {if (true) return parseroutput;}
      break;
    default:
      jj_la1[0] = jj_gen;
      if (jj_2_1(4)) {
        parseroutput = SubscriptionOrAdvertisement();
    {if (true) return parseroutput;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 27:
          parseroutput = Publication();
    {if (true) return parseroutput;}
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

//
// Composite Subscription
//
  final public CompositeSubscription CompositeSubscription(CompositeSubscription comsubparameter) throws ParseException, ParseException {
  Token t;
  CompositeSubscription comsubreturn;
  if (comsubparameter == null)
    comsubparameter = new CompositeSubscription();
    comsubreturn = Term(comsubparameter);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COPERATOR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      t = jj_consume_token(COPERATOR);
      CompositeNode cn = new CompositeNode(t.image, comsubreturn.getRoot(), null, null);
          comsubreturn.setRoot(cn);
      comsubreturn = Term(comsubparameter);
    }
    {if (true) return comsubreturn;}
    throw new Error("Missing return statement in function");
  }

  final public CompositeSubscription Term(CompositeSubscription comsubparameter) throws ParseException, ParseException {
    if (jj_2_2(2)) {
      jj_consume_token(25);
    Subscription sub;
      sub = SubCompositeSubscription();
      jj_consume_token(26);
    sNum++;
    String key = "s" + sNum;
        comsubparameter.addSubscription(key, sub);
        if (comsubparameter.getRoot() == null)
        {
      CompositeNode cn = new CompositeNode(key, null, null, null);
          comsubparameter.setRoot(cn);
        }
        else
        {
      CompositeNode cn = new CompositeNode("s" + sNum, null, null, comsubparameter.getRoot());
          comsubparameter.getRoot().setRightNode(cn);
        }
    {if (true) return comsubparameter;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        jj_consume_token(25);
    CompositeSubscription comsub;
        comsub = CompositeSubscription(comsubparameter);
        jj_consume_token(26);
    {if (true) return comsub;}
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

//
// Subscription or Advertisement (both are equal syntactically)
//
  final public Object SubscriptionOrAdvertisement() throws ParseException, ParseException {
TokenReturner a;
    a = ClassAttributeOperatorValueTriple();
    Object obj = null;
    switch(_parsertype) {
    case SUB_PARSER:
    {
      obj = new Subscription();
      if (a.val.image.charAt(0) == '\u005c'' || a.val.image.charAt(0) == '\u005c"')
      {
        String op = a.op.image;
        String value = a.val.image;
        Predicate predicate = new Predicate(op, value.substring(1,value.length()-1));
        ((Subscription)obj).addPredicate("class", predicate);
      }
      else
      {
        String op = a.op.image;
        String value = a.val.image;
        ((Subscription)obj).addPredicate("class", new Predicate(op, value));
      }
      break;
    }
    case ADV_PARSER:
    {
      obj = new Advertisement();
      if (a.val.image.charAt(0) == '\u005c'' || a.val.image.charAt(0) == '\u005c"')
      {
        String op = a.op.image;
        String value = a.val.image;
        Predicate predicate = new Predicate(op, value.substring(1,value.length()-1));
        ((Advertisement)obj).addPredicate("class", predicate);
      }
      else
      {
        String op = a.op.image;
        String value = a.val.image;
        ((Advertisement)obj).addPredicate("class", new Predicate(op, value));
      }
      break;
    }
    default:
      {if (true) throw new IllegalStateException("Wrong parser type: " + _parsertype);}
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      a = AttributeOperatorValueTriple();
      switch(_parsertype) {
      case COMP_SUB_PARSER:
      case SUB_PARSER:
      {
        String op = a.op.image;
        String value = a.val.image;
        switch(a.valtype)
        {
          case STRING:
            {
              if (a.val.image.charAt(0) == '\u005c'' || a.val.image.charAt(0) == '\u005c"')
                    ((Subscription)obj).addPredicate(a.attr.image, new Predicate(a.op.image, a.val.image.substring(1,a.val.image.length()-1)));
              else
                    ((Subscription)obj).addPredicate(a.attr.image, new Predicate(a.op.image, a.val.image));
              break;
            }
          case LONG:
            {
              Long l = new Long(value.startsWith("+") ? value.substring(1) : value);
              Predicate predicate = new Predicate(op, l);
              ((Subscription)obj).addPredicate(a.attr.image, predicate);
              break;
            }
          case DOUBLE:
            {
              Predicate predicate = new Predicate(op, new Double(value));
              ((Subscription)obj).addPredicate(a.attr.image, predicate);
              break;
            }
          default:
            {if (true) throw new UnsupportedOperationException("Unknown value type: " + a.valtype);}
        }
        break;
      }
      case ADV_PARSER:
      {
        String op = a.op.image;
        String value = a.val.image;
        switch(a.valtype)
        {
          case STRING:
            {
              if (a.val.image.charAt(0) == '\u005c'' || a.val.image.charAt(0) == '\u005c"')
              ((Advertisement)obj).addPredicate(a.attr.image, new Predicate(a.op.image, a.val.image.substring(1,a.val.image.length()-1)));
              else
              ((Advertisement)obj).addPredicate(a.attr.image, new Predicate(a.op.image, a.val.image));
              break;
            }
          case LONG:
            {
              Long l = new Long(value.startsWith("+") ? value.substring(1) : value);
              Predicate predicate = new Predicate(op, l);
              ((Advertisement)obj).addPredicate(a.attr.image, predicate);
              break;
            }
          case DOUBLE:
            {
              Predicate predicate = new Predicate(op, new Double(value));
              ((Advertisement)obj).addPredicate(a.attr.image, predicate);
              break;
            }
          default:
            {if (true) throw new UnsupportedOperationException("Unknown value type: " + a.valtype);}
        }
      }
      break;
    }
    }
    jj_consume_token(SEMICOLON);
    {if (true) return obj;}
    throw new Error("Missing return statement in function");
  }

  final public Subscription SubCompositeSubscription() throws ParseException, ParseException {
  TokenReturner a;
    a = ClassAttributeOperatorValueTriple();
    Subscription sub = new Subscription();
    if (a.val.image.charAt(0) == '\u005c'' || a.val.image.charAt(0) == '\u005c"')
      sub.addPredicate("class", new Predicate(a.op.image, a.val.image.substring(1,a.val.image.length()-1)));
    else
      sub.addPredicate("class", new Predicate(a.op.image, a.val.image));
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      a = AttributeOperatorValueTriple();
      switch(_parsertype) {
      case COMP_SUB_PARSER:
      {
        String op = a.op.image;
        String value = a.val.image;
        switch(a.valtype)
        {
          case STRING:
          {
            if (a.val.image.charAt(0) == '\u005c'' || a.val.image.charAt(0) == '\u005c"')
                  sub.addPredicate(a.attr.image,
                                                           new Predicate(a.op.image,
                                                                                         a.val.image.substring(1,a.val.image.length()-1)));
            else
                  sub.addPredicate(a.attr.image, new Predicate(a.op.image, a.val.image));
            break;
          }

          case LONG:
            {
              Long l = new Long(value.startsWith("+") ? value.substring(1) : value);
              Predicate predicate = new Predicate(op, l);
              sub.addPredicate(a.attr.image, predicate);
              break;
            }
          case DOUBLE:
            {
              Predicate predicate = new Predicate(op, new Double(value));
              sub.addPredicate(a.attr.image, predicate);
              break;
            }
          default:
            {if (true) throw new UnsupportedOperationException("Unknown value type: " + a.valtype);}
        }
        break;
      }
      default:
        {if (true) throw new UnsupportedOperationException("Unknown parser type: " + _parsertype);}
      }
//      if (a.val.image.charAt(0) == '\'' || a.val.image.charAt(0) == '\"') {
//        sub.addPredicate(a.attr.image, new Predicate(a.op.image, a.val.image.substring(1,a.val.image.length()-1))); 
//      } else {
//        sub.addPredicate(a.attr.image, new Predicate(a.op.image, a.val.image));
//      }

    }
    {if (true) return sub;}
    throw new Error("Missing return statement in function");
  }

//
// Class attribute is mandatory
//
  final public TokenReturner ClassAttributeOperatorValueTriple() throws ParseException {
  TokenReturner a = null;
    jj_consume_token(27);
    a = new TokenReturner();
    a.attr = jj_consume_token(CLASS);
    jj_consume_token(COMMA);
    a.op = jj_consume_token(EQ);
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AVALSTR:
      a.val = jj_consume_token(AVALSTR);
      break;
    case ANAME:
      a.val = jj_consume_token(ANAME);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(28);
    attrlist = Collections.synchronizedSet(new HashSet<String>());
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

//
// Class attribute is mandatory
//
  final public Token ClassAttributeValuePair() throws ParseException {
  Token a;
    jj_consume_token(27);
    jj_consume_token(CLASS);
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AVALSTR:
      a = jj_consume_token(AVALSTR);
      break;
    case ANAME:
      a = jj_consume_token(ANAME);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(28);
    attrlist = Collections.synchronizedSet(new HashSet<String>());
        {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public TokenReturner AttributeOperatorValueTriple2() throws ParseException, ParseException {
  TokenReturner a = null;
    jj_consume_token(27);
      a = new TokenReturner();
    a.attr = jj_consume_token(ANAME);
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case SOPERATOR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOPERATOR:
        a.op = jj_consume_token(SOPERATOR);
        break;
      case EQ:
        a.op = jj_consume_token(EQ);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AVALSTR:
      case SVARIABLE:
        a.val = SVALUE();
        break;
      case ANAME:
        a.val = jj_consume_token(ANAME);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case IOPERATOR:
      a.op = jj_consume_token(IOPERATOR);
      jj_consume_token(COMMA);
      a.val = IVALUE();
      break;
    case ISPRESENT:
      a.op = jj_consume_token(ISPRESENT);
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AVALSTR:
      case SVARIABLE:
        a.val = SVALUE();
        break;
      case ANAME:
        a.val = jj_consume_token(ANAME);
        break;
      case AVALLONG:
      case AVALDOUBLE:
      case IVARIABLE:
        a.val = IVALUE();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(28);
      if (!attrlist.add(a.attr.image))
         {if (true) throw new ParseException("Attribute " + a.attr.image + " exists multiple times " + attrlist);}
      {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public TokenReturner AttributeOperatorValueTriple() throws ParseException, ParseException {
  TokenReturner a = null;
    jj_consume_token(27);
      a = new TokenReturner();
    a.attr = jj_consume_token(ANAME);
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case SOPERATOR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOPERATOR:
        a.op = jj_consume_token(SOPERATOR);
        break;
      case EQ:
        a.op = jj_consume_token(EQ);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AVALSTR:
      case SVARIABLE:
        a.val = SVALUE();
        break;
      case ANAME:
        a.val = jj_consume_token(ANAME);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case ISPRESENT:
    case IOPERATOR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IOPERATOR:
        a.op = jj_consume_token(IOPERATOR);
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IVARIABLE:
          a.val = jj_consume_token(IVARIABLE);
                    a.valtype = TokenReturner.ValueType.STRING;
          break;
        case AVALLONG:
          a.val = jj_consume_token(AVALLONG);
                    a.valtype = TokenReturner.ValueType.LONG;
          break;
        case AVALDOUBLE:
          a.val = jj_consume_token(AVALDOUBLE);
                    a.valtype = TokenReturner.ValueType.DOUBLE;
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case ISPRESENT:
        a.op = jj_consume_token(ISPRESENT);
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AVALSTR:
        case SVARIABLE:
          a.val = SVALUE();
                    a.valtype = TokenReturner.ValueType.STRING;
          break;
        case ANAME:
          a.val = jj_consume_token(ANAME);
                    a.valtype = TokenReturner.ValueType.STRING;
          break;
        case IVARIABLE:
          a.val = jj_consume_token(IVARIABLE);
                    a.valtype = TokenReturner.ValueType.STRING;
          break;
        case AVALLONG:
          a.val = jj_consume_token(AVALLONG);
                    a.valtype = TokenReturner.ValueType.LONG;
          break;
        case AVALDOUBLE:
          a.val = jj_consume_token(AVALDOUBLE);
                    a.valtype = TokenReturner.ValueType.DOUBLE;
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(28);
      if (!attrlist.add(a.attr.image))
         {if (true) throw new ParseException("Attribute " + a.attr.image + " exists multiple times " + attrlist);}
      {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

//
// Publication
//
  final public Publication Publication() throws ParseException, ParseException {
  TokenReturner a = null;
  Token val;
    val = ClassAttributeValuePair();
     Publication pub = new Publication();
     if (val.image.charAt(0) == '\u005c'' || val.image.charAt(0) == '\u005c"')
       pub.addPair("class", val.image.substring(1,val.image.length()-1));
     else
       pub.addPair("class", val.image);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      a = AttributeValuePair();
       if (a.val.image.charAt(0) == '\u005c'' || a.val.image.charAt(0) == '\u005c"')
       {
         pub.addPair(a.attr.image, a.val.image.substring(1,a.val.image.length()-1));
       }
       else
       {
         switch(a.valtype)
         {
           case LONG:
             Long l = new Long(a.val.image.startsWith("+") ? a.val.image.substring(1) : a.val.image);
             pub.addPair(a.attr.image, new Long(l));
             break;
           case DOUBLE:
             pub.addPair(a.attr.image, new Double(a.val.image));
             break;
           case STRING:
             pub.addPair(a.attr.image, a.val.image);
             break;
           default:
             {if (true) throw new UnsupportedOperationException(
               "Unknown value type: " + a.val + "(" + a.valtype + ")");}
         }
       }
    }
    jj_consume_token(SEMICOLON);
     pub.setTimeStamp(null);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIMEFORMAT:
      val = jj_consume_token(TIMEFORMAT);
      jj_consume_token(SEMICOLON);
       try
       {
         DateFormat df = new SimpleDateFormat ("EEE MMM dd kk:mm:ss zzz yyyy");
         pub.setTimeStamp(df.parse(val.image));
       }catch(java.text.ParseException e)
       {
         {if (true) throw new ParseException(e.toString());}
       }
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
     if (pub.getTimeStamp() == null)
       pub.setTimeStamp(new Date());
     {if (true) return pub;}
    throw new Error("Missing return statement in function");
  }

  final public TokenReturner AttributeValuePair2() throws ParseException, ParseException {
    jj_consume_token(27);
      TokenReturner a = new TokenReturner();
      a.op = null;
    a.attr = jj_consume_token(ANAME);
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANAME:
    case AVALSTR:
    case SVARIABLE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AVALSTR:
      case SVARIABLE:
        a.val = SVALUE();
        break;
      case ANAME:
        a.val = jj_consume_token(ANAME);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case AVALLONG:
    case AVALDOUBLE:
    case IVARIABLE:
      a.val = IVALUE();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(28);
      if (!attrlist.add(a.attr.image))
         {if (true) throw new ParseException("Attribute " + a.attr.image + " exists multiple times.");}
      {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public TokenReturner AttributeValuePair() throws ParseException, ParseException {
    jj_consume_token(27);
      TokenReturner a = new TokenReturner();
      a.op = null;
    a.attr = jj_consume_token(ANAME);
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IVARIABLE:
      a.val = jj_consume_token(IVARIABLE);
        a.valtype = TokenReturner.ValueType.STRING;
      break;
    case AVALSTR:
    case SVARIABLE:
      a.val = SVALUE();
        a.valtype = TokenReturner.ValueType.STRING;
      break;
    case ANAME:
      a.val = jj_consume_token(ANAME);
        a.valtype = TokenReturner.ValueType.STRING;
      break;
    case AVALDOUBLE:
      a.val = jj_consume_token(AVALDOUBLE);
        a.valtype = TokenReturner.ValueType.DOUBLE;
      break;
    case AVALLONG:
      a.val = jj_consume_token(AVALLONG);
        a.valtype = TokenReturner.ValueType.LONG;
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(28);
      if (!attrlist.add(a.attr.image))
         {if (true) throw new ParseException("Attribute " + a.attr.image + " exists multiple times" + attrlist);}
      {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Token SVALUE() throws ParseException {
  Token a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AVALSTR:
      a = jj_consume_token(AVALSTR);
      break;
    case SVARIABLE:
      a = jj_consume_token(SVARIABLE);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Token IVALUE() throws ParseException {
  Token a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AVALDOUBLE:
      a = jj_consume_token(AVALDOUBLE);
      break;
    case AVALLONG:
      a = jj_consume_token(AVALLONG);
      break;
    case IVARIABLE:
      a = jj_consume_token(IVARIABLE);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3_1() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(27)) return true;
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(25)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_3R_7()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MessageParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000000,0x8000000,0x2000,0x2000000,0x40,0x40,0x24000,0x24000,0x880,0x124000,0x3e4000,0x1c80,0x880,0x124000,0x2c0000,0x3e4000,0x1400,0x1c80,0x40,0x8000,0x124000,0x3e4000,0x3e4000,0x120000,0x2c0000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MessageParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MessageParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MessageParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MessageParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MessageParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MessageParser(MessageParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MessageParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[29];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 29; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
